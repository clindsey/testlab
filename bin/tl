#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'testlab'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/testlab` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/testlab now"
  exit 64
end

include GLI::App

program_desc %(TestLab #{TestLab::VERSION} - A framework for building lightweight virtual infrastructure using LXC)

version Testlab::VERSION

# desc 'Describe some switch here'
# switch [:s,:switch]

# desc 'Describe some flag here'
# default_value 'the default'
# arg_name 'The name of the argument'
# flag [:f,:flagname]

desc 'Manage the test lab'
arg_name 'Describe arguments to lab here'
command :lab do |c|

  c.desc 'Create the test lab'
  c.command :create do |create|
    create.action do |global_options,options,args|
      @testlab.create
    end
  end

  c.desc 'Destroy the test lab'
  c.command :destroy do |destroy|
    destroy.action do |global_options,options,args|
      @testlab.destroy
    end
  end

  c.desc 'Online the test lab'
  c.command :up do |up|
    up.action do |global_options,options,args|
      @testlab.up
    end
  end

  c.desc 'Offline the test lab'
  c.command :down do |down|
    down.action do |global_options,options,args|
      @testlab.down
    end
  end

  c.desc 'Setup the test lab infrastructure'
  c.command :setup do |setup|
    setup.action do |global_options,options,args|
      @testlab.setup
    end
  end

  c.desc 'Teardown the test lab infrastructure'
  c.command :teardown do |teardown|
    teardown.action do |global_options,options,args|
      @testlab.teardown
    end
  end

  c.desc 'Display information on the status of the test lab'
  c.command :status do |status|
    status.action do |global_options,options,args|
      @testlab.status
    end
  end

  # c.desc 'Describe a switch to lab'
  # c.switch :s

  # c.desc 'Describe a flag to lab'
  # c.default_value 'default'
  # c.flag :f
  # c.action do |global_options,options,args|

  #   # Your command logic here

  #   # If you have any errors, just raise them
  #   # raise "that command made no sense"

  #   puts "lab command ran"
  # end
end

desc 'Describe node here'
arg_name 'Describe arguments to node here'
command :node do |c|

  c.desc 'A node ID'
  c.flag :n

  c.desc 'Open an SSH console to the node'
  c.command :ssh do |ssh|
    ssh.action do |global_options,options,args|
      node = TestLab::Node.all.first{ |n| n.id.to_sym == options[:n].to_sym }
      node.ssh.console
    end
  end

  # c.action do |global_options,options,args|
  #   puts "node command ran"
  # end
end

desc 'Describe network here'
arg_name 'Describe arguments to network here'
command :network do |c|
  c.action do |global_options,options,args|
    puts "network command ran"
  end
end

desc 'Describe container here'
arg_name 'Describe arguments to container here'
command :container do |c|
  c.action do |global_options,options,args|
    puts "container command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only

  log_file = File.join(Dir.pwd, "testlab.log")
  @logger = ZTK::Logger.new(log_file)
  @ui = ZTK::UI.new(:logger => @logger)
  @testlab = TestLab.new(:ui => @ui)

  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
